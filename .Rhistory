#not_outcome <- !(df$outcome == 1)
not_outcome <- df$Outcome != 1
library('readr')
path <- "C:/Users/TRAINER/Downloads/diabetes.csv"
df <- read_csv(path)
View(df)
#not_outcome <- !(df$outcome == 1)
not_outcome <- df$Outcome != 1
a <- df[not_outcome, ]
View(a)
path2 <- "C:/Users/TRAINER/Documents/data/Brewery_data.csv"
df2 <- read_csv(path2)
View(df2)
last_three_years <- unique(df2$YEARS)
print(last_three_years)
countries <- unique(df2$COUNTRIES)
print(countries)
county <- df2$COUNTRIES
territories <- c()
for (i in county){
if (i == "Nigeria" | i == "Ghana"){
territories <- c(territories, "Anglophone")
} else {
territories <- c(territories, "Francophone")
}
}
territory <- data.frame(
TERRITORY <- territories
)
print(territory)
#calculates the percentage of different columns
percentage_function <- function(col_name){
percent <- c()
for (i in col_name){
percent_formula <- round((i/ sum(col_name))* 100, 3)
percent <- c(percent, percent_formula)
}
data_percent <- data.frame(
main_data = col_name,
percentage = percent
)
return(data_percent)
}
a <- percentage_function(df$BloodPressure)
View(a)
df3 <- mutate(df2, TERRITORY = territories)
install.packages('dplyr')
install.packages('dplyr')
library('dplyr')
df3 <- mutate(df2, TERRITORY = territories)
View(df3)
df4 <- df2 %>% mutate(TERRITORY = territories,
.after= COUNTRIES)
View(df4)
a_y <- df3$TERRITORY == "Anglophone"
anglo <- df3[a_y,]
anglo_profit <- sum(anglo$PROFIT)
print(anglo_profit)
user_response_power <- readline(prompt = "Enter value for the power: ")
user_response_digits <- readline(prompt = "Enter value for last digits needed: ")
multiplier <- 1
for (i in 1:user_response_digits){
multiplier <- multiplier * 10
}
last_digit_generator <- 2 ** user_response_power
last_digit <- last_digit_generator %% multiplier
user_response_power <- readline(prompt = "Enter value for the power: ")
user_response_digits <- readline(prompt = "Enter value for last digits needed: ")
multiplier <- 1
for (i in 1:user_response_digits){
multiplier <- multiplier * 10
}
print(multiplier)
last_digit_generator <- 2 ** user_response_power
user_response_power <- as.numeric(readline(prompt = "Enter value for the power: "))
user_response_digits <- as.numeric(readline(prompt = "Enter value for last digits needed: "))
multiplier <- 1
for (i in 1:user_response_digits){
multiplier <- multiplier * 10
}
print(multiplier)
last_digit_generator <- 2 ** user_response_power
last_digit <- last_digit_generator %% multiplier
print(last_digit)
user_response_power <- as.numeric(readline(prompt = "Enter value for the power: "))
multiplier <- 10
last_digit_generator <- 2 ** user_response_power
last_digit <- last_digit_generator %% multiplier
print(last_digit)
user_response_power <- as.numeric(readline(prompt = "Enter value for the power: "))
multiplier <- 100
last_digit_generator <- 2 ** user_response_power
last_digit <- last_digit_generator %% multiplier
print(last_digit)
d <- c(1, 2, 4, 6)
index <- 1
fact <- 1
for (i in 1:x[index]){
fact <- fact * i
}
d <- c(1, 2, 4, 6)
index <- 1
fact <- 1
for (i in 1:d[index]){
fact <- fact * i
}
d <- c(1, 2, 4, 6)
index <- 1
fact <- 1
d_1 <- c()
for (i in 1:d[index]){
fact <- fact * i
d_1 <- c(d_1, fact)
}
print(d_1)
d <- c(1, 2, 4, 6)
index <- 1
fact <- 1
d_1 <- c()
for (i in 1:d[index <= length(d)]){
fact <- fact * i
d_1 <- c(d_1, fact)
index <- index + 1
}
d <- c(1, 2, 4, 6)
index <- 1
fact <- 1
d_1 <- c()
for (i in 1:d){
fact <- fact * i
d_1 <- c(d_1, fact)
index <- index + 1
}
print(d_1)
d <- c(1, 2, 4, 6)
index <- 1
fact <- 1
d_1 <- c()
for (i in d){
fact <- fact * i
d_1 <- c(d_1, fact)
index <- index + 1
}
print(d_1)
d <- c(1, 2, 4, 6)
index <- 1
fact <- 1
d_1 <- c()
for (i in 1:d[index <= length(d)]){
fact <- fact * i
print(i)
print(fact)
d_1 <- c(d_1, fact)
index <- index + 1
print(index)
}
print(d_1)
d <- c(1, 2, 4, 6)
index <- 1
fact <- 1
d_1 <- c()
for (i in 1:d){
fact <- fact * i
print(i)
print(fact)
d_1 <- c(d_1, fact)
index <- index + 1
print(index)
}
print(d_1)
d <- c(1, 2, 4, 6)
index <- 1
fact <- 1
d_1 <- c()
for (i in d){
fact <- fact * i
print(i)
print(fact)
d_1 <- c(d_1, fact)
index <- index + 1
print(index)
}
d <- c(1, 2, 4, 6)
fact <- 1
d_1 <- c()
for (i in d){
for (j in 1:i){
fact <- fact * j
d_1 <- c(d_1, fact)
}
print(d_1)
}
d <- c(1, 2, 4, 6)
fact <- 1
d_1 <- c()
for (i in d){
for (j in 1:i){
fact <- fact * j
d_1 <- c(d_1, fact)
}
}
print(d_1)
d <- c(1, 2, 4, 6)
fact <- 1
d_1 <- c()
for (i in d){
for (j in 1:i){
fact <- fact * j
d_1 <- c(d_1, fact)
}
}
print(i)
d <- c(1, 2, 4, 6)
fact <- 1
d_1 <- c()
for (i in d){
for (j in 1:i){
fact <- fact * j
d_1 <- c(d_1, fact)
}
print(i)
}
print(j)
d <- c(1, 2, 4, 6)
fact <- 1
d_1 <- c()
for (i in d){
for (j in 1:i){
fact <- fact * j
d_1 <- c(d_1, fact)
print(j)
}
}
d <- c(1, 2, 4, 6)
fact <- 1
d_1 <- c()
for (i in d){
for (j in 1:i){
fact <- fact * j
d_1 <- c(d_1, fact)
print(fact)
}
}
d <- c(1, 2, 4, 6)
fact <- 1
d_1 <- c()
for (i in d){
for (j in 1:i){
fact <- fact * j
d_1 <- c(d_1, fact)
}
print(fact)
}
d <- c(4)
fact <- 1
for (i in d){
fact <- fact * j
d_1 <- c(d_1, fact)
}
d <- c(4)
fact <- 1
for (i in d){
fact <- fact * j
}
print(fact)
d <- c(4)
fact <- 1
for (i in d){
fact <- fact * i
}
print(fact)
d <- 4
fact <- 1
for (i in d){
fact <- fact * i
}
print(fact)
d <- 4
fact <- 1
for (i in 1:d){
fact <- fact * i
}
print(fact)
#######--------------------------------------------------------------------
load.data <- function(path_val){
df2 <- read_csv(path_val)
return(df2)
}
new.function <- function(df2){
county <- df2$COUNTRIES
territories <- c()
for (i in county){
if (i == "Nigeria" | i == "Ghana"){
territories <- c(territories, "Anglophone")
} else {
territories <- c(territories, "Francophone")
}
}
return(territories)
}
add.dataframe <- function(df2, territories){
df3 <- mutate(df2, TERRITORY = territories)
return(df3)
}
path_val <- "C:/Users/TRAINER/Documents/data/Brewery_data.csv"
x <- load.data(path_val)
new_territory <- new.function(x)
add_df <- add.dataframe(x, new_territory)
print(new_territory)
print(add_df)
View(add_df)
install.packages('readr')
install.packages('readr')
install.packages('readr')
library('readr')
install.packages('readr')
install.packages('dplyr')
library('dplyr')
#QUESTION 1
unique_year <- unique(df$YEARS)
path <- "C:/Users/TRAINER/Documents/data/Brewery_data.csv"
df <- read_csv(path)
View(df)
#QUESTION 1
unique_year <- unique(df$YEARS)
print(unique_year)
install.packages('janitor')
library('readr')
library('janitor')
library('dplyr')
path <- "C:\Users\TRAINER\Documents\finnstats\FinData.csv"
df <- read_csv(path)
View(df)
#install.packages('janitor')
library('readr')
library('janitor')
library('dplyr')
path <- "C:\Users\TRAINER\Documents\finnstats\FinData.csv"
df <- read_csv(path)
path <- "C:/Users/TRAINER/Documents/finnstats/FinData.csv"
df <- read_csv(path)
View(df)
#install.packages('janitor')
library('readr')
library('janitor')
library('dplyr')
path <- "C:/Users/TRAINER/Documents/finnstats/FinData.csv"
df <- read_csv(path)
View(df)
path <- "C:/Users/TRAINER/Desktop/finnstats/FinData.csv"
df <- read_csv(path)
View(df)
clean_df <- clean_names(df)
col_names <- colnames(clean_df)
print(col_names)
clean_df %>% tabyl(employee_status, full_time) %>% adorn_totals()
for (i in col_names){
summ <- tabyl(clean_df, i)
print(summ)
}
for (i in col_names){
formatt <- clean_df %>% tabyl(i) %>%
adorn_pct_formatting(digits = 2, affix_sign = T)
print(formatt)
}
mtcars %>%
tabyl(am, cyl) %>%
adorn_percentages("col") %>%
adorn_pct_formatting()
cases <- data.frame(
region = c("East", "West"),
year = 2015,
recovered = c(125, 87),
died = c(13, 12)
)
cases %>%
adorn_percentages("col",,recovered:died) %>%
adorn_pct_formatting(,,,recovered:died)
for (i in col_names){
pct_format <- clean_df %>% tabyl(i, full_time) %>% adorn_totals()
print(pct_format)
}
for (i in col_names){
pct_format <- clean_df %>% tabyl(i, full_time) %>% adorn_totals()
print(pct_format)
}
for (i in col_names){
pct_format <- clean_df %>% tabyl(employee_status, full_time) %>% adorn_totals()
print(pct_format)
}
for (i in col_names){
pct_format <- clean_df %>% tabyl(i, full_time) %>% adorn_totals()
print(pct_format)
}
for (i in col_names){
pct_format <- clean_df %>% tabyl(i) %>% adorn_totals()
print(pct_format)
}
clean_df %>% tabyl(employee_status, full_time) %>% adorn_totals(where = c("row", "col"))
clean_df %>% tabyl(employee_status, full_time) %>% adorn_totals()
clean_df %>% tabyl(employee_status, full_time, subject)
for (i in col_names){
pct_format <- clean_df %>% tabyl(employee_status, full_time) %>% adorn_totals()
print(pct_format)
}
clean_df %>% tabyl(employee_status, full_time) %>% adorn_totals()
for (i in col_names){
pct_format <- clean_df %>% tabyl(employee_status, full_time,i) %>% adorn_totals()
print(pct_format)
}
clean_df %>% tabyl(employee_status, full_time) %>% adorn_totals()
new_clean <- clean_df%>% remove_empty(which = c("rows"))
print(new_clean)
new_clean <- clean_df %>% remove_empty(which = c("rows"))
clean_new <- new_clean %>% remove_empty(which = c("cols"))
View(clean_new)
new_clean <- clean_df %>% remove_empty(whic = c("rows"))
clean_new <- new_clean %>% remove_empty(whic = c("cols"))
View(clean_new)
clean_new %>% get_dupes(first_name)
clean_new %>% get_dupes(first_name)
clean_new %>% get_dupes(first_name, certification_10)
clean_new %>% get_dupes(first_name)
dat <- clean_new %>% get_dupes(first_name, certification_10)
View(dat)
filtered <- clean_new %>% filter(grepl('/', hire_date))
View(filtered)
filtered_two <- clean_new %>% filter(grepl('/', hire_date))
View(filtered_two)
filtered_one <- clean_new %>% filter(!grepl('/', hire_date))
View(filtered_one)
